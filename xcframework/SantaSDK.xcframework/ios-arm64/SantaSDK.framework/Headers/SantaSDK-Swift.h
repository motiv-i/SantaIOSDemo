#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef SANTASDK_SWIFT_H
#define SANTASDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SantaSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)


@class NSString;
@class WKContentWorld;

SWIFT_CLASS("_TtC8SantaSDK14STAdTagManager")
@interface STAdTagManager : WKUserScript
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithCoppa:(NSString * _Nullable)coppa keywords:(NSDictionary<NSString *, NSString *> * _Nullable)keywords OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSource:(NSString * _Nonnull)source injectionTime:(WKUserScriptInjectionTime)injectionTime forMainFrameOnly:(BOOL)forMainFrameOnly SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithSource:(NSString * _Nonnull)source injectionTime:(WKUserScriptInjectionTime)injectionTime forMainFrameOnly:(BOOL)forMainFrameOnly inContentWorld:(WKContentWorld * _Nonnull)contentWorld SWIFT_UNAVAILABLE;
@end


@interface STAdTagManager (SWIFT_EXTENSION(SantaSDK))
- (void)requestTrackingAuthorizationWithHandler:(void (^ _Nonnull)(NSString * _Nullable))handler;
- (NSString * _Nonnull)makeSource:(NSDictionary<NSString *, id> * _Nullable)data SWIFT_WARN_UNUSED_RESULT;
@end



@interface STAdTagManager (SWIFT_EXTENSION(SantaSDK))
/// Children’s Online Privacy Protection Act (COPPA)
@property (nonatomic, copy) NSString * _Nonnull coppa;
@property (nonatomic, copy) NSString * _Nullable yob;
@property (nonatomic, copy) NSString * _Nullable gender;
/// 관련성이 더 높은 광고를 수신하기 위해 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
- (void)keywords:(NSDictionary<NSString *, NSString *> * _Nullable)keywords;
- (void)keywords:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
@end

@protocol STAdViewDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC8SantaSDK8STAdView")
@interface STAdView : UIView
@property (nonatomic, strong) id <STAdViewDelegate> _Nullable delegate;
@property (nonatomic, strong) UIView * _Nullable adContentView;
/// 광고 유닛 ID
@property (nonatomic, copy) NSString * _Nullable adUnitId;
/// 광고 포맷
@property (nonatomic, copy) NSArray<NSString *> * _Nullable adFormat;
/// 관련성이 더 높은 광고를 수신하기 위해 광고 서버로 전달되어야하는 키워드 세트를 나타내는 딕셔너리입니다..
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable keywords;
/// Children’s Online Privacy Protection Rule
/// 아동 온라인 프라이버시 보호법 여부를 결정하는 값입니다. (0 : No, 1: Yes)
@property (nonatomic, copy) NSString * _Nonnull coppa;
/// 지면의 리워드 여부 (default : No)
@property (nonatomic, copy) NSString * _Nullable rewarded;
/// FullSizeWebView (default : false)
@property (nonatomic) BOOL fullWebView;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
@property (nonatomic) BOOL testing;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// 광고 ID와 배너 크기로 AdView를 초기화합니다.
/// @param adUnitId  광고 유닛 ID를 나타내는 문자열입니다.
/// @param size  원하는 광고 크기입니다.
/// @return 주어진 광고  ID 및 크기에 따라 새로 초기화 된 광고보기입니다.
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
/// 광고 서버에서 새 광고를 요청합니다.
/// 광고보기가 이미 광고를로드중인 경우이 호출은 무시됩니다. 기존 광고 요청을 취소하고 새 광고를 강제로로드하려면<code>forceRefreshAd</code>를 사용할 수 있습니다.
- (void)loadAd;
/// 광고를 중지 한다
/// 광고를 중지할때 호출 (리로드 타임이 중지 됩니다. 화면에서 나갈때 실행하면 됩니다.)
- (void)stopAd;
/// 기존 광고 요청을 취소하고 광고 서버에서 새 광고를 요청합니다.
- (void)forceRefreshAd;
/// 광고보기에 기기 방향이 변경되었음을 알립니다.
/// 일부 타사 광고 네트워크의 배너는 방향에 따라 작동합니다. 미디에이션 된 광고가 새로운 방향을 인식하도록하려면 애플리케이션의 방향이 변경 될 때이 메서드를 호출해야합니다.
/// 조정 된 광고의 크기에 따라 애플리케이션 레이아웃을 변경해야하는 경우 방향 변경으로 인해 조정 된 광고의 크기가 조정되는 경우이 메소드를 호출 한 후 ‘adContentViewSize’값을 확인하는 것이 좋습니다.
/// @param newOrientation 새 인터페이스 방향 (방향 변경이 발생한 후).
- (void)rotateToOrientation:(UIInterfaceOrientation)newOrientation;
/// 타사 네이티브 광고 네트워크에서 모든 방향에 맞는 크기의 광고를 사용할 수 있습니다.
/// 이전에<code>lockNativeAdsToOrientation :</code>을 호출 한 적이 없으면이 메소드를 호출 할 필요가 없습니다.
/// @see lockNativeAdsToOrientation:
/// @see allowedNativeAdsOrientation
- (void)unlockNativeAdsOrientation;
/// 광고보기가 주기적으로 새 광고를로드하지 못하도록합니다.
/// 기본적으로 광고보기는 웹 사이트에서 새로 고침 간격이 구성된 경우 새 광고를 자동으로로드 할 수 있습니다.
/// 이 방법은 새로 고침 간격이 지정된 경우에도 새 광고가 자동으로로드되지 않도록합니다.
/// 가장 좋은 방법은 불필요한 광고 요청을 방지하기 위해 광고보기가 사용자에게 표시되지 않을 때마다이 메소드를 호출하는 것입니다.
/// 그런 다음<code>startAutomaticallyRefreshingContents</code>를 호출하여 광고보기가 표시 될 때 새로 고침 동작을 다시 사용하도록 설정할 수 있습니다.
/// @see startAutomaticallyRefreshingContents
- (void)stopAutomaticallyRefreshingContents;
/// 웹 사이트의 사용자 정의 새로 고침 설정에 따라 광고보기가 주기적으로 새 광고를로드하도록합니다.
/// 이전에<code>stopAutomaticallyRefreshingContents</code>를 사용하여 광고보기의 새로 고침 동작을 중지 한 경우에만이 메서드를 호출해야합니다.
/// 기본적으로 광고보기는 웹 사이트에서 새로 고침 간격이 구성된 경우 새 광고를 자동으로로드 할 수 있습니다. 이 방법은 새로 고침 간격이 설정되지 않은 경우 효과가 없습니다.
/// @see stopAutomaticallyRefreshingContents
- (void)startAutomaticallyRefreshingContents;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_PROTOCOL("_TtP8SantaSDK16STAdViewDelegate_")
@protocol STAdViewDelegate
@optional
/// 광고를 성공적으로로드하면 전송됩니다.
/// 아직 삽입하지 않은 경우이 메소드를 구현하여보기 계층 구조에 광고보기를 삽입해야합니다.
/// @param  view 광고뷰
- (void)adViewDidLoadAd:(STAdView * _Nullable)view;
/// 광고로드에 실패 할 때 전송됩니다.
/// 빈 광고가 표시되지 않도록하려면이 메시지에 대한 응답으로 광고보기를 숨겨야합니다.
/// @param  view 광고뷰
- (void)adViewDidFailToLoadAd:(STAdView * _Nullable)view;
/// 광고가 비어있으며 미디에이션이 존재할 때 전송됩니다.
/// 빈 광고가 표시되지 않도록 전송된 미디에이션 목록을 활용해야합니다.
/// @param mediations 미디에이션 목록
- (void)adViewDidLoadMediation:(NSArray<NSString *> * _Nullable)mediations;
/// 콘텐츠를로드하려고 할 때 전송됩니다.
/// 이 메서드는 사용자가 광고보기를 탭할 때 호출됩니다.
/// 이 메서드의 구현은 사용자 상호 작용이 필요한 모든 애플리케이션 활동을 일시 중지해야합니다.
/// @param  view 광고뷰
/// @see <code>didLoadViewForAd:</code>
- (void)willLoadViewForAd:(STAdView * _Nullable)view;
/// 모달 콘텐츠를 닫았을 때 전송되어 애플리케이션에 제어권을 반환합니다.
/// 이 메소드의 구현은<code>willLoadViewForAd :</code>에 대한 응답으로 일시 중지 된 모든 애플리케이션 활동을 재개해야합니다.
/// @param view 광고뷰.
/// @see <code>willLoadViewForAd:</code>
- (void)didLoadViewForAd:(STAdView * _Nullable)view;
/// 사용자가 광고를 탭하여 애플리케이션에서 나 가려고 할 때 전송됩니다.
/// 이 메서드가 호출 된 직후 애플리케이션이 백그라운드로 이동합니다.
/// @param view 광고뷰
- (void)willLeaveApplicationFromAd:(STAdView * _Nullable)view;
@end

@protocol STInterstitialAdViewDelegate;
@class NSBundle;

SWIFT_CLASS("_TtC8SantaSDK20STInterstitialAdView")
@interface STInterstitialAdView : UIViewController
/// 지정된 광고 ID와 일치하는 전면 광고 개체를 반환합니다.
/// 광고 ID에 대해이 메서드가 처음 호출되면 새 전면 광고가 생성되고 공유 풀에 저장되고 반환됩니다.
/// 동일한 광고 단위 ID에 대한 후속 호출은<code>removeSharedInterstitialAdController :</code>를 사용하여 개체를 삭제하지 않는 한 해당 개체를 반환합니다.
/// 주어진 시간에 광고 ID에 대해 하나의 전면 광고 개체 만있을 수 있습니다.
/// @param adUnitId 광고 ID를 나타내는 문자열입니다.
+ (STInterstitialAdView * _Nonnull)interstitialAdControllerForAdUnitId:(NSString * _Nonnull)adUnitId SWIFT_WARN_UNUSED_RESULT;
/// The delegate (<code>STInterstitialAdViewDelegate</code>) of the interstitial ad object.
@property (nonatomic, strong) id <STInterstitialAdViewDelegate> _Nullable delegate;
/// 이 전면 광고의 광고 ID입니다.
/// 광고 단위 ID는 웹 사이트에서 생성됩니다. 광고 단위는 광고용으로 따로 설정 한 애플리케이션의 정의 된 배치입니다. 광고 단위 ID가 설정되지 않은 경우 광고 개체는 테스트 광고 만 수신하는 기본 ID를 사용합니다.
@property (nonatomic, copy) NSString * _Nullable adUnitId;
/// 광고 포맷
@property (nonatomic, copy) NSArray<NSString *> * _Nullable adFormat;
/// 관련성이 더 높은 광고를 수신하기 위해 광고 서버로 전달되어야하는 키워드 세트를 나타내는 딕셔너리입니다..
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다.
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nullable keywords;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
@property (nonatomic) BOOL testing;
/// Children’s Online Privacy Protection Rule
/// 아동 온라인 프라이버시 보호법 여부를 결정하는 값입니다. (0 : Off, 1: On)
@property (nonatomic, copy) NSString * _Nullable coppa;
/// 전면 광고에 대한 광고 콘텐츠로드를 시작합니다.
/// 로드 성공 또는 실패 알림을 받으려면<code>STInterstitialAdViewDelegate</code>의<code>interstitialDidLoadAd :</code>및<code>interstitialDidFailToLoadAd :</code>메소드를 구현할 수 있습니다.
- (void)loadAd;
/// 지정된 뷰 컨트롤러에서 모달로 전면 광고를 표시합니다.
/// 이 메소드는 삽입 광고가로드되지 않은 경우 아무 작업도 수행하지 않습니다 (즉, ‘ready’속성 값이 NO 임).
/// <code>STInterstitialAdViewDelegate</code>는 전면 광고가 화면을 차지하거나 포기할 때 알림을 받기 위해 구현할 수있는 선택적 메소드를 제공합니다.
/// @param controller 전면 광고를 표시하는 데 사용해야하는 뷰 컨트롤러입니다.
- (void)showFromViewController:(UIViewController * _Nullable)controller;
/// 응용 프로그램에서 사용할 수있는 삽입 광고의 공유 풀에서 지정된 삽입 광고 개체를 제거합니다.
/// 이 방법은 삽입 광고의 광고 단위 ID로 삽입 광고 개체에 대한 매핑을 제거합니다.
/// 즉, 동일한 광고  ID에 나중에<code>interstitialAdViewForAdUnitId :</code>를 호출하면 다른 광고 오브젝트를받습니다.
/// @warning * 중요 ** :이 방법은 삽입 광고 개체가 불필요하게되었을 때 할당을 해제하는 데 사용하는 것을 목적으로하고 있습니다.
/// 이 메소드를 호출 한 후 개체에 대한 참조를 “nil”해야합니다.
/// @param controller The interstitial ad object that should be disposed.
- (void)removeSharedInterstitialAdView:(STInterstitialAdView * _Nonnull)controller;
- (void)viewDidLoad;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
/// 지정된 광고 ID와 일치하는 전면 광고 개체를 반환합니다.
/// 광고 ID에 대해이 메서드가 처음 호출되면 새 전면 광고가 생성되고 공유 풀에 저장되고 반환됩니다.
/// 동일한 광고 단위 ID에 대한 후속 호출은<code>removeSharedInterstitialAdView :</code>를 사용하여 개체를 삭제하지 않는 한 해당 개체를 반환합니다.
/// 주어진 시간에 광고 ID에 대해 하나의 전면 광고 개체 만있을 수 있습니다.
/// @param adUnitId 광고 ID를 나타내는 문자열입니다.
- (nonnull instancetype)initWithAdUnitId:(NSString * _Nonnull)adUnitId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface STInterstitialAdView (SWIFT_EXTENSION(SantaSDK))
- (BOOL)getReady SWIFT_WARN_UNUSED_RESULT;
@end


/// The delegate of an <code>STInterstitialAdView</code> object must adopt the
/// <code>STInterstitialAdViewDelegate</code> protocol.
/// 이 프로토콜의 선택적 메소드를 사용하면 광고가로드 된 때, 광고가 화면에서 표시되거나 닫힐 때, 광고가 만료 된 때와 같은 전면 광고 상태 변경에 대해 대리자가 알림을받을 수 있습니다.
SWIFT_PROTOCOL("_TtP8SantaSDK28STInterstitialAdViewDelegate_")
@protocol STInterstitialAdViewDelegate
@optional
/// 전면 광고를 성공적으로로드하면 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidLoadAd:(STInterstitialAdView * _Nullable)interstitial;
/// 광고를로드하지 못할 때 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidFailToLoadAd:(STInterstitialAdView * _Nullable)interstitial;
/// 광고가 비어있으며 미디에이션이 존재할 때 전송됩니다.
/// 빈 광고가 표시되지 않도록 전송된 미디에이션 목록을 활용해야합니다.
/// @param mediations 미디에이션 목록
- (void)interstitialDidLoadMediation:(NSArray<NSString *> * _Nullable)mediations;
/// 전면 광고가 화면에 표시되기 직전에 전송됩니다.
/// 이 메소드의 구현은 사용자 상호 작용이 필요한 모든 애플리케이션 활동을 일시 중지해야합니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialWillAppear:(STInterstitialAdView * _Nullable)interstitial;
/// 전면 광고가 화면에 표시된 후에 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidAppear:(STInterstitialAdView * _Nullable)interstitial;
/// 전면 광고가 화면에 표시되지 못할때
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidFailToShow:(STInterstitialAdView * _Nullable)interstitial;
/// 전면 광고가 화면에서 닫히기 직전에 전송됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialWillDisappear:(STInterstitialAdView * _Nullable)interstitial;
/// 전면 광고가 화면에서 해제 된 후 전송되어 애플리케이션에 제어권이 반환됩니다.
/// 이 방법을 구현하면 전면 광고가 화면에 표시되기 전에 일시 중지 된 모든 애플리케이션 활동이 재개되어야합니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidDisappear:(STInterstitialAdView * _Nullable)interstitial;
/// 로드 된 전면 광고를 더 이상 표시 할 수 없을 때 전송됩니다.
/// 특정 네트워크의 전면 광고는 콘텐츠가 현재 화면에 있더라도 언제든지 콘텐츠가 만료 될 수 있습니다. 이 메소드는 현재로드 된 전면 광고가 만료되어 더 이상 표시 할 수없는 경우 알려줍니다.
/// 광고가 만료 될 때 화면에 표시 되었다면이 메시지가 전송 될 때 이미 광고가 닫 혔을 것입니다.
/// 원하는 경우 새 광고를 가져 오는<code>loadAd</code> 호출이 구현에 포함될 수 있습니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidExpire:(STInterstitialAdView * _Nullable)interstitial;
/// 사용자가 전면 광고를 탭하고 광고가 타겟 작업을 수행하려고 할 때 전송됩니다.
/// 이 작업에는 모달 표시 또는 애플리케이션 종료가 포함될 수 있습니다. 특정 광고 네트워크는 ‘탭된’콜백을 노출하지 않을 수 있으므로이 콜백에 의존하여 중요한 작업을 수행해서는 안됩니다.
/// @param interstitial 메시지를 보내는 전면 광고 클래스입니다.
- (void)interstitialDidReceiveTapEvent:(STInterstitialAdView * _Nullable)interstitial;
@end

@protocol STNativeAdDelegate;

/// <code>STNativeAd</code> 클래스는 네이티브 광고에 대한 이벤트를 렌더링하고 관리하는 데 사용됩니다.
/// 이 클래스는 서버에서 반환 된 네이티브 광고 속성에 액세스하기위한 메서드와 URL 탐색 및
/// 메트릭 수집을위한 편리한 메서드를 제공합니다.
SWIFT_CLASS("_TtC8SantaSDK10STNativeAd")
@interface STNativeAd : NSObject
@property (nonatomic, strong) id <STNativeAdDelegate> _Nullable delegate;
- (UIView * _Nullable)retrieveAdViewWithError:(NSError * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






SWIFT_PROTOCOL("_TtP8SantaSDK18STNativeAdDelegate_")
@protocol STNativeAdDelegate
/// 네이티브 광고가 모달 콘텐츠를 표시 할 때 전송됩니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)willLoadForNativeAd:(STNativeAd * _Nullable)nativeAd;
/// 네이티브 광고가 모달 콘텐츠를 닫았을 때 전송되어 애플리케이션에 제어권을 반환합니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)didLoadForNativeAd:(STNativeAd * _Nullable)nativeAd;
/// 사용자가이 기본 광고를 탭한 결과로 애플리케이션에서 나 가려고 할 때 전송됩니다.
/// @param nativeAd 메시지를 보내는 네이티브 광고입니다.
- (void)willLeaveApplicationFromNativeAd:(STNativeAd * _Nullable)nativeAd;
/// 광고를 탭할 때 나타날 수있는 인앱 브라우저와 같은 모달 콘텐츠를 표시하는 데 사용할 뷰 컨트롤러를 대리인에게 요청합니다.
/// @return 모달 콘텐츠를 표시하는 데 사용해야하는 뷰 컨트롤러입니다.
- (UIViewController * _Nullable)viewControllerForPresentingModalView SWIFT_WARN_UNUSED_RESULT;
@end

@class NSSet;
@class STNativeAdRequest;

SWIFT_CLASS("_TtC8SantaSDK17STNativeAdManager")
@interface STNativeAdManager : NSObject
/// 광고 포맷
/// 노출될 광고 포맷 유형
+ (void)adFormat:(NSArray<NSString *> * _Nonnull)adForamt;
/// 관련성이 더 높은 광고를 수신하기 위해 광고 서버로 전달되어야하는 키워드 세트를 나타내는 문자열입니다.
/// 키워드는 일반적으로 특정 사용자 세그먼트에서 광고 캠페인을 타겟팅하는 데 사용됩니다. 쉼표로 구분 된 키-값 쌍 형식이어야합니다 (e.g. “marital:single,age:24”).
/// 웹 사이트의 키워드 타겟팅 옵션은 캠페인 관리시 “고급 타겟팅”섹션에서 찾을 수 있습니다.
+ (void)keywords:(NSDictionary<NSString *, NSString *> * _Nullable)keywords;
+ (void)keywords:(NSString * _Nonnull)key :(NSString * _Nonnull)value;
/// 광고보기가 테스트 모드에서 광고를 요청해야하는지 여부를 결정하는 Boolean 값입니다.
/// The default value is NO.
+ (void)testing:(BOOL)testing;
/// Children’s Online Privacy Protection Rule
/// 아동 온라인 프라이버시 보호법 여부를 결정하는 값입니다. (0 : Off, 1: On)
+ (void)coppa:(NSString * _Nonnull)coppa;
/// 원하는 네이티브 광고 개체의 자산에 해당하는 미리 정의 된 문자열 세트.
/// 광고 서버는 desiredAssets의 값들만 반환합니다.
+ (void)desiredAssets:(NSSet * _Nonnull)desiredAssets;
+ (void)initNativeAdWithAdUnitIdentifier:(NSString * _Nonnull)identifier :(Class _Nullable)adViewClass SWIFT_METHOD_FAMILY(none);
/// 광고 서버에 대한 요청을 실행합니다.
/// @param handler 요청이 완료 될 때 실행할 블록.
/// 블록에는 요청 자체와 유효한 EBNativeAd 또는 실패를 나타내는 NSError 개체가 매개 변수로 포함됩니다.
+ (void)startWithCompletionHandler:(void (^ _Nullable)(STNativeAdRequest * _Nullable, STNativeAd * _Nullable, NSError * _Nullable))handler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UILabel;
@class UIImageView;

/// STNativeAdRenderingDelegate 프로토콜은 맞춤보기 클래스에 광고 콘텐츠를 표시하는 방법을 제공합니다.
/// 정적 네이티브 광고와 네이티브 동영상 광고 모두에 사용할 수 있습니다.
/// 네이티브 동영상 광고를 게재하는 경우 nativeVideoView를 구현해야합니다.
SWIFT_PROTOCOL("_TtP8SantaSDK27STNativeAdRenderingDelegate_")
@protocol STNativeAdRenderingDelegate
@optional
/// 메인 텍스트에 사용하고있는 UILabel을 반환합니다.
/// @return 본문에 사용되는 UILabel
- (UILabel * _Nullable)nativeMainTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 제목 텍스트에 사용중인 UILabel을 반환합니다.
/// @return 제목 텍스트에 사용되는 UILabel
- (UILabel * _Nullable)nativeTitleTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 아이콘 이미지에 사용중인 UIImageView를 반환합니다.
/// @return 아이콘 이미지에 사용되는 UIImageView.
- (UIImageView * _Nullable)nativeIconImageView SWIFT_WARN_UNUSED_RESULT;
/// 메인 이미지에 사용중인 UIImageView를 반환합니다.
/// @return 메인 이미지에 사용되는 UIImageView
- (UIImageView * _Nullable)nativeMainImageView SWIFT_WARN_UNUSED_RESULT;
/// 비디오에 사용하는 UIView를 반환합니다.
/// 동영상 광고를 게재 할 때만이를 구현하면됩니다.
/// @return 동영상을 보관하는 데 사용되는 UIView
- (UIView * _Nullable)nativeVideoView SWIFT_WARN_UNUSED_RESULT;
/// *클릭 유도 문안 (cta) 텍스트에 사용중인 UILabel을 반환합니다.
/// *
/// <ul>
///   <li>
///     @return cta 텍스트에 사용되는 UILabel
///   </li>
/// </ul>
- (UILabel * _Nullable)nativeCallToActionTextLabel SWIFT_WARN_UNUSED_RESULT;
/// 개인 정보 아이콘에 대해 뷰가 사용중인 UIImageView를 반환합니다.
/// @return개인 정보 아이콘에 사용되는 UIImageView
- (UIImageView * _Nullable)nativePrivacyInformationIconImageView SWIFT_WARN_UNUSED_RESULT;
@end


/// *<code>STNativeAdRequest</code> 클래스는 기본 광고 서버에 대한 개별 요청을 관리하는 데 사용됩니다.
/// *
/// <ul>
///   <li>
///     @warning <em>Note:</em> 이 클래스는 기본 광고의 응답을 수동으로 처리하려는 일회성 요청을 대상으로하고 있습니다.
///   </li>
///   <li>
///     <code>STTableViewAdPlacer</code> 또는<code>STCollectionViewAdPlacer</code>를 사용하여 광고를 표시하는 경우는이 클래스를 사용할 필요가 없습니다.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC8SantaSDK17STNativeAdRequest")
@interface STNativeAdRequest : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable mediations;
/// 광고 서버에 대한 요청을 실행합니다.
/// @param handler 요청이 완료되면 실행할 블록. 블록에 매개 변수로 요청 자체와 실패의 유효한 STNativeAd 또는 NSError 객체 중 하나가 포함됩니다.
- (void)startWithCompletionHandler:(void (^ _Nullable)(STNativeAdRequest * _Nullable, STNativeAd * _Nullable, NSError * _Nullable))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface WKWebView (SWIFT_EXTENSION(SantaSDK))
@property (nonatomic, readonly) UIEdgeInsets safeAreaInsets;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
